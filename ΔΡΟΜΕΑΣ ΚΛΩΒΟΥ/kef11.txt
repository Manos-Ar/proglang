(*11.1:*)

datatype cards = hearts | spades | clubs | diamonds;

(*11.2:*)

fun card_name hearts = "hearts" |
card_name spades = "spades" |
card_name clubs = "clubs" |
card_name diamonds = "diamonds";

(*11.3:*)

datatype number = INT of int | REAL of real;

(*11.4:*)

fun plus (INT(x)) (INT(y)) = INT(x+y) |
plus (REAL(x)) (REAL(y)) = REAL(x+y) |
plus (INT(x)) (REAL(y)) = REAL(real(x)+y) |
plus (REAL(x)) (INT(y)) = REAL(x+real(y));

(*11.5:*)

fun addup (LIST nil) = 0 |
addup (INT x) = x |
addup (LIST (INT(a)::more)) = a + addup (LIST more);

(*11.6:*)

fun product NIL = 1 |
product(CONS(a, more))=a*product(more);

(*11.7:*)

fun unili(NIL,NIL) = NIL |
unili (CONS(a,more),NIL) = CONS(a,more) |
unili (NIL, CONS(b,more)) = CONS(b,more) |
unili (CONS(a,more1),CONS(b,more2)) = unili (CONS(b,CONS(a,more1)),more2);
fun reverse(NIL) = NIL |
reverse(CONS(a,more)) = unili(CONS(a,NIL),more);


(*11.9:*)

fun append_all Empty = nil |
append_all (Node(left,n,right)) = append_all(left) @ n @ append_all(right);

(*11.10:*)

fun isComplete Empty = true |
isComplete (Node(Node(a,b,c),n,Empty)) = false |
isComplete (Node(Empty,n,Node(a,b,c))) = false |
isComplete (Node(left,n,right))= isComplete(left) andalso isComplete(right);

(*11.11:*)

fun makeBST nil compf = Empty |
makeBST [a] compf = Node(Empty,a,Empty) |
makeBST (a::b::more) compf =
if compf(a,b) then Node(Empty,a,makeBST (b::more) (compf))
else Node(makeBST (a::more) (compf),a,Empty);

(*11.12:*)

fun searchBST (Empty) compf e = false |
searchBST (Node(left,n,right)) (compf) (e) =
if n=e then true
else if compf(e,n) then searchBST (left) (compf) (e)
else searchBST (right) (compf) (e);