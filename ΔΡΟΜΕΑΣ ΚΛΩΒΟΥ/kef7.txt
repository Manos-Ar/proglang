(*7.2:*)

fun member (e,nil)=false
| member (e,[a])=a=e
| member (e,L)=
e=hd(L) orelse member(e,tl(L));

(*7.3:*)

fun less (e,nil)=nil
| less(e,L) =
if hd(L)<e then hd(L)::less(e,tl(L))
else less(e,tl(L));

(*7.4:*)

fun repeats nil = false
| repeats[a] = false
| repeats(a::b::more) =
a=b orelse repeats(b::more);

(*7.5:*)

fun calc(nil,x:real)=0.0
| calc (a::more,x:real)=
a*x+calc(more,x*x);
fun evaluate(nil,x:real)=0.0
| evaluate (a::more,x:real)=
a+calc(more,x);

(*7.6:*)

fun join(nil,nil,nil)=nil
| join(nil,[p],nil)=[p]
| join(nil,[p],a::more)=p::a::more
| join(a::more,[p],nil)=a::more@[p]
| join(a,[p],b)=a@[p]@b;
fun subli (nil,nil,nil) = (nil,nil,nil)
| subli ([a],subli1,subli2)=(subli1,[a],subli2)
| subli (a::b::more, subli1, subli2)=
if b<a then
subli(a::more,b::subli1,subli2)
else
subli(a::more,subli1,b::subli2);
fun QuickSort nil = nil
| QuickSort [a] = [a]
| QuickSort L =
let
val (small,piv,big)=subli(L,nil,nil)
val one=QuickSort(small);
val two=QuickSort(big);
in
join(one,piv,two)
end;

(*7.7:*)
fun join(nil,nil,nil)=nil
| join(nil,[p],nil)=[p]
| join(nil,[p],a::more)=p::a::more
| join(a::more,[p],nil)=a::more@[p]
| join(a,[p],b)=a@[p]@b;
fun subli (nil,nil,nil,f) = (nil,nil,nil)
| subli ([a],subli1,subli2,f)=(subli1,[a],subli2)
| subli (a::b::more, subli1, subli2,f)=
if f(b,a) then
subli(a::more,b::subli1,subli2,f)
else
subli(a::more,subli1,b::subli2,f);
fun QuickSort (nil,f) = nil
| QuickSort ([a],f) = [a]
| QuickSort (L,f) =
let
val (small,piv,big)=subli(L,nil,nil,f)
val one=QuickSort(small,f);
val two=QuickSort(big,f);
in
join(one,piv,two)
end;

(*7.8:*)
fun member (e,nil)=false
| member (e,[a])=a=e
| member (e,S)=
e=hd(S) orelse member(e,tl(S));

(*7.9:*)
fun member (e,nil)=false
| member (e,[a])=a=e
| member (e,S)=
e=hd(S) orelse member(e,tl(S));
fun decommon nil = nil
| decommon [a]=[a]
| decommon (a::more)=
if member(a,more) then decommon(more)
else a::decommon(more);
fun union (nil,nil) = nil
| union(s1,nil)=s1
| union(nil,s2)=s2
| union (s1,s2) =
let
val c=s1@s2
in
decommon(c)
end;

(*7.10:*)

fun member (e,nil)=false
| member (e,[a])=a=e
| member (e,S)=
e=hd(S) orelse member(e,tl(S));
- fun intersect(nil,nil) = nil
| intersect(s1,nil)=nil
| intersect(nil,s2)=nil
| intersect(a::more,s2)=
if member(a,s2) then a::intersect(more,s2)
else intersect(more,s2);

(*7.11:*)

fun dup (nil,a) = [nil]
| dup ([]::more,a) =
[[a]]@dup(more,a)
| dup (first::more,a) =
[first,first@[a]]@dup(more,a);
fun powerset nil = [nil]
| powerset (a::more) =
dup(powerset(more),a);

